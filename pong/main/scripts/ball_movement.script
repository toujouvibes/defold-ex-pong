local BALL_OUT_OF_BOUNDS = hash("ball out of bounds")

local COLLISION_RESPONSE = hash("collision_response")

local TOP_WALL = hash("/top_wall")
local BOTTOM_WALL = hash("/bottom_wall")
local LEFT_PADDLE = hash("/left_paddle")
local RIGHT_PADDLE = hash("/right_paddle")

local object_speed = 300

function init(self)
	self.game_width = tonumber(sys.get_config("display.width"))
	self.object_width = go.get("#sprite", "size.x")

	local directions = {-1, 1}

	local initial_direction = directions[math.random(#directions)]

	self.direction = vmath.vector3(initial_direction, 1, 0)
end
	
function update(self, dt)
	local speed = vmath.vector3(object_speed * self.direction.x, object_speed * self.direction.y, 0)

	local next_pos = go.get_position() + speed * dt

	if next_pos.x + self.game_width < 0  or next_pos.x - self.object_width > self.game_width then
		msg.post("controller#main_controller", BALL_OUT_OF_BOUNDS)
		go.delete()
	end

	go.set_position(next_pos)
end

function on_message(self, message_id, message, sender)
	if message_id == COLLISION_RESPONSE then
		local other_id = message.other_id

		if previous_other_id == other_id then
			return
		end
		
		if other_id == TOP_WALL or other_id == BOTTOM_WALL then
			self.direction.y = self.direction.y * -1
		elseif other_id == LEFT_PADDLE or other_id == RIGHT_PADDLE then
			self.direction.x = self.direction.x * -1
		end
		
		self.previous_other_id = other_id
	end
end